<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Test out some basic information

// Get whether or not we are a chrome app
global.is_chrome_app = chrome_is_app();

global.manifest = noone;
self.updates_available = "Checking for updates...";
self.ev_update_check = noone;
self.ev_load_included_file = noone;

if (global.is_chrome_app)
{
    // Load the manifest (if there is one)
    global.manifest = json_decode(chrome_runtime_get_manifest());
    // Check for updates
    self.ev_update_check = chrome_runtime_request_update_check();
    // Load a file from the app bundle
    self.ev_load_included_file = chrome_package_load("game/package.json");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle update response

if chrome_has_result(self.ev_update_check)
{
    var status = chrome_get_result(self.ev_update_check,"status");
    var version = chrome_get_result(self.ev_update_check,"version");
    
    if status == cpa_update_available
    {
        self.updates_available = "New version available: "+string(version);
    }
    else if status == cpa_update_none
    {
        self.updates_available = "Version up to date";
    }
    else if status == cpa_update_throttled
    {
        self.updates_available = "Version check was throttled";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle file load response

if chrome_has_result(self.ev_load_included_file)
{
    var error = chrome_get_result(self.ev_load_included_file,"error");
    if error != ""
    {
        show_debug_message("GameMaker failed to load included file");
    }
    else
    {
        var result = chrome_get_result(self.ev_load_included_file,"result");
        show_debug_message(result);
    }
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the basic app info

var xx = x - 128;
draw_set_color(NEAR_BLACK);
draw_set_font(fRegular);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_text(xx,y,"Is Chrome App: "+string(global.is_chrome_app));

if global.is_chrome_app
{
    draw_text(xx,y,"#" + self.updates_available);
    draw_text(xx,y,"##Manifest name: " + ds_map_find_value(global.manifest,"name"));
    draw_text(xx,y,"###Manifest version: " + ds_map_find_value(global.manifest,"version"));
}
else
{
    draw_text_ext(xx,y,
        "#You must run in a chrome app in order "+
        "to use most of the functionality in this "+
        "extension. You can use the chrome_is_app() "+
        "function to test for a Chrome App environment.",-1,256);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
